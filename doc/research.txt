//https://www.minecraftforum.net/forums/mapping-and-modding-java-edition/mapping-and-modding-tutorials/1571330-better-java-midi-instrument-sounds-for-linux
//Load custom sf2 soundfonts
    public Synthesizer synth;
    private Soundbank sbDefault;
    private Soundbank sbDeluxe;

    try{
    synth = MidiSystem.getSynthesizer();
    synth.open();
    }
    catch ( MidiUnavailableException e1) { e1.printStackTrace(); }

    sbDefault = gSynth.getDefaultSoundbank();
    synth.unloadAllInstruments( sbDefault );

    File file = new File( "/home/someuser/.gervill/SuperDuper.sf2" ); // or maybe Wonderful.dls
    try { sbDeluxe = MidiSystem.getSoundbank(file); }
    catch (Exception e) { e.printStackTrace(); }

    synth.loadAllInstruments( sbDeluxe);

    public Sequencer seqr;
    try{
    seqr = MidiSystem.getSequencer() ;
    seqr.open() ;
    seqr.getTransmitter().setReceiver( synth.getReceiver() ) ;
    }
    catch (Exception e) { /*fail code*/ }

//Clojure: https://taylodl.wordpress.com/2014/01/21/making-music-with-clojure-an-introduction-to-midi/
//FluidR3 sf2 https://www.kvraudio.com/forum/viewtopic.php?t=357783
// sound recording for sequence?
//http://www.codejava.net/coding/capture-and-record-sound-into-wav-file-with-java-sound-api
import javax.sound.sampled.*;
import java.io.*;

/**
 * A sample program is to demonstrate how to record sound in Java
 * author: www.codejava.net
 */
public class JavaSoundRecorder {
    // record duration, in milliseconds
    static final long RECORD_TIME = 60000;  // 1 minute

    // path of the wav file
    File wavFile = new File("E:/Test/RecordAudio.wav");

    // format of audio file
    AudioFileFormat.Type fileType = AudioFileFormat.Type.WAVE;

    // the line from which audio data is captured
    TargetDataLine line;

    /**
     * Defines an audio format
     */
    AudioFormat getAudioFormat() {
        float sampleRate = 16000;
        int sampleSizeInBits = 8;
        int channels = 2;
        boolean signed = true;
        boolean bigEndian = true;
        AudioFormat format = new AudioFormat(sampleRate, sampleSizeInBits,
                                             channels, signed, bigEndian);
        return format;
    }

    /**
     * Captures the sound and record into a WAV file
     */
    void start() {
        try {
            AudioFormat format = getAudioFormat();
            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);

            // checks if system supports the data line
            if (!AudioSystem.isLineSupported(info)) {
                System.out.println("Line not supported");
                System.exit(0);
            }
            line = (TargetDataLine) AudioSystem.getLine(info);
            line.open(format);
            line.start();   // start capturing

            System.out.println("Start capturing...");

            AudioInputStream ais = new AudioInputStream(line);

            System.out.println("Start recording...");

            // start recording
            AudioSystem.write(ais, fileType, wavFile);

        } catch (LineUnavailableException ex) {
            ex.printStackTrace();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    /**
     * Closes the target data line to finish capturing and recording
     */
    void finish() {
        line.stop();
        line.close();
        System.out.println("Finished");
    }

    /**
     * Entry to run the program
     */
    public static void main(String[] args) {
        final JavaSoundRecorder recorder = new JavaSoundRecorder();

        // creates a new thread that waits for a specified
        // of time before stopping
        Thread stopper = new Thread(new Runnable() {
            public void run() {
                try {
                    Thread.sleep(RECORD_TIME);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                recorder.finish();
            }
        });

        stopper.start();

        // start recording
        recorder.start();
    }
}

//Good article on sound API: https://www.ibm.com/developerworks/library/it/it-0801art38/

//Intervals
Consonant = unison, octave, perfect fifth
Other Consonant = major 3rd, minor 3rd, major 6th, minor 6th
Mildly Dissonant = major 2nd, minor 7th, perfect 4th, aug 4th, dim 5th
Strongly Dissonant = minor 2nd, major 7th

Unison 1/1
Octave 2/1
Perfect Fifth 3/2
Major Third 5/4
Minor Third 6/5 type 1
Minor Third 32/27 type 2
Major second 9/8 type 1
Major second 10/9 type 2
Minor second 16/15

//Comping
6-10
2r-2-4r-8
4-4r-2-2-4r
2-2-4r-4-4r
4r-4-4r-4r
2r-2-4r-8

//12 bar blues F Maj
F-Bb-F-F
Bb-Bb-F-F
C-Bb-F-F

//From youtube on movie soundtrack, M=Major, m=minor,# is number of semi-tones
M2M - Protagonism
M6M - Outer space
M8M - Fantastical
M4m - Sadness, loss
M5m - Romantic, Middle Eastern
m5M - Wonder, transcendence (also M7m)
m2M - mystery or dark comedy
m11M - Dramatic sound popular in early 21st century
m6m - Antagonism, danger (less character-based)
m8m - Antagonism, evil (more character-based)

Chord state machine:
I -> go anywhere
ii -> V,iii
iii -> ii, vi, IV
IV -> V, I, iii, ii
V -> I, vi
vi -> IV, V, ii
vii -> NONE =(


--add-exports jdk.internal.opt/jdk.internal.joptsimple=ALL-UNNAMED
